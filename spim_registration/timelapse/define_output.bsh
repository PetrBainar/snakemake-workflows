// Load Fiji dependencies
import ij.IJ; 		// calls imagej
import ij.Prefs; 	// calls imagej settings
import ij.ImagePlus;
import java.lang.Runtime;
import java.io.File;
import java.io.FilenameFilter;

runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");

Prefs.setThreads(1); 	// defines the number of threads allowed 
print("Threads: "+Prefs.getThreads()); // prints thread setting in output

String delims = "[,]";

System.out.println("Start loading parameters");

System.out.println("=========================================================");
System.out.println("Directory:");

image_file_directory = System.getProperty( "image_file_directory" );
System.out.println( "image_file_directory = " + image_file_directory );

project_filename = System.getProperty( "project_filename" );
System.out.println( "project_filename = " + project_filename );


System.out.println("=========================================================");
System.out.println("Dataset:");

define_dataset = System.getProperty( "define_dataset" );
multiple_timepoints = System.getProperty( "multiple_timepoints" );
multiple_illumination_directions = System.getProperty( "multiple_illumination_directions" );
multiple_angles = System.getProperty( "multiple_angles" );
multiple_tiles = System.getProperty( "multiple_tiles" );
imglib_container = System.getProperty( "imglib_container" );

System.out.println( "define_dataset = " + define_dataset );
System.out.println( "multiple_timepoints = " + multiple_timepoints );
System.out.println( "multiple_illumination_directions = " + multiple_illumination_directions );
System.out.println( "multiple_angles = " + multiple_angles );
System.out.println( "multiple_tiles = " + multiple_tiles );
System.out.println( "imglib_container = " + imglib_container );

System.out.println("=========================================================");
System.out.println("Channels:");

channels = System.getProperty( "channels" ); 
String[] channel_token = channels.split(delims);
String multiple_channels = null;
if ( channel_token.length == 1 )
{ 
	multiple_channels = "NO (one channel)";
}
else if ( channel_token.length > 1 )
{
	multiple_channels = "YES (one file per channel)";	
}
else {
	System.out.println( "Channel switch setting gibberish" );
}
System.out.println( "multiple_channels = " + multiple_channels );
System.out.println( "channels = " + channels );

// NB: Need to create channel IDs, assuming sequential numbering
String channel_ids = "";
for (int i = 0; i < channel_token.length; i++)
{
    System.out.println( "Assuming that Channel " + channel_token[i] + " has ID " + i + "!");
    channel_ids += i + ",";
}
channel_ids = channel_ids.substring(0, channel_ids.length() - 1);
System.out.println( "channel_ids = " + channel_ids );


System.out.println("=========================================================");
System.out.println("Timepoints:");

int ntimepoints = Integer.parseInt(System.getProperty("ntimepoints" ) );
String timepoints = "";
for (int i = 0; i < ntimepoints; i++)
{
    timepoints += i + ",";
}
timepoints = timepoints.substring(0, timepoints.length() - 1);
System.out.println( "timepoints = " + timepoints );


System.out.println("=========================================================");
System.out.println("File name pattern:");

image_file_pattern = "fused";
if ( ntimepoints > 0 || multiple_channels.equals( "YES (one file per channel)" ) || multiple_illumination_directions.equals("YES (one file per illumination direction)") )
{
    image_file_pattern += "_tp_{t}_ch_{c}";
	
	if ( multiple_illumination_directions.equals("YES (one file per illumination direction)") )
	{
	    image_file_pattern += "_illum_{i}";
	}
}
image_file_pattern += ".tif";
System.out.println( image_file_pattern );


System.out.println("=========================================================");
System.out.println("Calibration:");

manual_calibration_output = System.getProperty( "manual_calibration_output" );
float pixel_distance_x = Float.parseFloat( System.getProperty( "pixel_distance_x" ) );
float pixel_distance_y = Float.parseFloat( System.getProperty( "pixel_distance_y" ) );
float pixel_distance_z = Float.parseFloat( System.getProperty( "pixel_distance_z" ) );
pixel_unit = System.getProperty( "pixel_unit" );

System.out.println( "pixel_distance_x = " + pixel_distance_x );
System.out.println( "pixel_distance_y = " + pixel_distance_y );
System.out.println( "pixel_distance_z = " + pixel_distance_z );
System.out.println( "pixel_unit = " + pixel_unit );

// Build string for calibration override
modify_calibration_string = " ";
manual_calibration_string = " ";
if (manual_calibration_output.equalsIgnoreCase( "No" ) )
{
	modify_calibration_string = "calibration_definition=[Load voxel-size(s) from file(s)] ";
	System.out.println( modify_calibration_string );
}
else if (manual_calibration_output.equalsIgnoreCase( "Yes" ) )
{	
	modify_calibration_string = "calibration_definition=[User define voxel-size(s)] ";
	manual_calibration_string = "pixel_distance_x=" + pixel_distance_x + " " +
				    "pixel_distance_y=" + pixel_distance_y + " " +
				    "pixel_distance_z=" + pixel_distance_z + " " +
				    "pixel_unit=" + pixel_unit + " ";
	System.out.println( "Calibration set to manual" );
	System.out.println( modify_calibration_string );
	System.out.println( "manual_calibration_string:" + manual_calibration_string );
}
else
{
	System.out.println( "Manual calibration setting bad" );
}

System.out.println("=========================================================");
System.out.println("Start plugin:");
System.out.println("Define Multi-View Dataset , define_dataset=[" + define_dataset + "] " +
	"project_filename=" + project_filename + ".xml " +
	"multiple_timepoints=[" + multiple_timepoints + "] " +
	"multiple_channels=[" + multiple_channels + "] " +
	"_____multiple_illumination_directions=[" + multiple_illumination_directions + "] " + 
	"multiple_angles=[" + multiple_angles + "] " +
	"multiple_tiles=[" + multiple_tiles + "] " +	
	"image_file_directory=" + image_file_directory + " " +
	"image_file_pattern=" + image_file_pattern + " " + 
	"timepoints_=" + timepoints + " " +
	"channels_=" + channel_ids + " " +
	"calibration_type=[Same voxel-size for all views] " +
	modify_calibration_string + 
	"imglib2_data_container=[" + imglib_container + "] " + 
	manual_calibration_string +
	"");

// Executes Fiji plugin
try {
IJ.run("Define Multi-View Dataset", 
	"define_dataset=[" + define_dataset + "] " +
	"project_filename=" + project_filename + ".xml " +
	"multiple_timepoints=[" + multiple_timepoints + "] " +
	"multiple_channels=[" + multiple_channels + "] " +
	"_____multiple_illumination_directions=[" + multiple_illumination_directions + "] " + 
	"multiple_angles=[" + multiple_angles + "] " +
	"multiple_tiles=[" + multiple_tiles + "] " +	
	"image_file_directory=" + image_file_directory + " " +
	"image_file_pattern=" + image_file_pattern + " " + 
	"timepoints_=" + timepoints + " " +
	"channels_=" + channel_ids + " " +
	"calibration_type=[Same voxel-size for all views] " +
	modify_calibration_string + 
	"imglib2_data_container=[" + imglib_container + "] " + 
	manual_calibration_string +
	"");
}
catch ( e ) { 

    print( "[define_output] caught exception: "+e );
    //important to fail the process if exception occurs
    runtime.exit(1);
    
}
/* shutdown */
runtime.exit(0);